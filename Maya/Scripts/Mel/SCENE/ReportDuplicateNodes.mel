/* This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name: ReportDuplicateNodes
''    Author: Mark Bamforth 
''    Last Updated: Oct 21, 2007
''    Update/Change this file at:
''    http://Highend3d.com/maya/downloads/mel_scripts/data_management/1713.html
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/
/*
Courtesy of XVIVO, LLC 
Written by Mark Bamforth 
(c) 2002-2007 XVIVO, LLC 
contact: info@xvivo.net 

Creates a set of all nodes with duplicate ( non - unique ) names within a scene.  Also allows you to rename them automatically. 

USAGE:
Turn this script into a shelf button. Click the button. Follow the directions.

Several speed and performance enhancements have been added to this version.
Obsolete MEL commands have been replaced/removed.

This script may not be redistributed, in whole or in part, without written consent from Xvivo, LLC.
MODIFY AT YOUR OWN RISK
*/

ReportDuplicateNodes_UI();

proc ReportDuplicateNodes_UI()
{
	if(`window -query -exists ReportDuplicateNodesWin`)
		deleteUI ReportDuplicateNodesWin;

	window -title "Report Duplicate Node Names" -toolbox true -sizeable false ReportDuplicateNodesWin;
	columnLayout -adjustableColumn true;

	text -l "";

	string $myCBG =	`checkBoxGrp
					-va2 true false
					-numberOfCheckBoxes 2
					-labelArray2 "Create Set" "Auto Rename"
					RDNN
					`;

	text -l "";

	button -label "Report Duplicates" -command "ReportDuplicateNodes_CL; deleteUI ReportDuplicateNodesWin";

	window -edit -widthHeight 210 92 ReportDuplicateNodesWin; 
	showWindow ReportDuplicateNodesWin;
}

proc ReportDuplicateNodes_CL()
{
	int $makeSet = `checkBoxGrp -q -v1 RDNN`; 
	int $autoRename = `checkBoxGrp -q -v2 RDNN`;

	ReportDuplicateNodes_DoIt($makeSet,$autoRename);
}

proc ReportDuplicateNodes_DoIt(int $makeSet, int $autoRename)
{
	string $dup, $dupList[] = ReportDuplicateNodes_FindDuplicates(), $newName, $nameOnly;
	int $attempt, $depth=0, $maxDepth=0, $depths[];
	int $i, $j;

	if (($makeSet==1) && ($dupList[0]!=""))
		sets -n ("Renaming_Set_" + size($dupList) + "_Items") $dupList;

	if($autoRename==1)
	{
		$attempt=0;
		if($dupList[0]!="")
		{

			for($i=0; $i<`size($dupList)`; $i++)
			{
				$dup = $dupList[$i];
				$depth = ReportDuplicateNodes_GetDepth($dup);
				$depths[$i]=$depth;
				if($depth>$maxDepth) $maxDepth=$depth;
			}

			print ($maxDepth + "\n");

			for($i=$maxDepth; $i>=0; $i--)
			{
				print($i + "\n");
				for ($j=0; $j<`size($dupList)`; $j++)
				{
					$dup = $dupList[$j];
					if($depths[$j]==$i)
					{
						if(`referenceQuery -inr $dup`==0)
						{
							$nameOnly=ReportDuplicateNodes_StripPath($dup);
							$newName = $nameOnly + $attempt;

							while(`objExists $newName`==true)
							{
								$attempt++;
								$newName=$nameOnly + $attempt;
							}
						}
						rename $dup $newName;
					}
				}
			}
		}
	}


	if($autoRename==1)
	{
		$dupList = ReportDuplicateNodes_FindDuplicates();

		if(`size($dupList)`>0)
			ReportDuplicateNodes_DoIt($makeSet,$autoRename);
	}
}

proc string[] ReportDuplicateNodes_FindDuplicates()
{
	int $numDups=0, $iDup=0, $d;
	string $dups[], $objs[] = `ls -r true`, $obj;

	for($obj in $objs)
	{
		$d = (ReportDuplicateNodes_GetDepth($obj) + "\n");

		if($d>0)
		{
			$dups[$numDups++]=$obj;
		}
	}
	return $dups;
}

proc string ReportDuplicateNodes_StripPath(string $object)
{
	int $items;
	string $buffer[];

	$items = `tokenize $object "|" $buffer`;
	$object=$buffer[$items-1];

	return $object;
}

proc int ReportDuplicateNodes_GetDepth(string $object)
{
	string $buffer[];
	return (`tokenize $object "|" $buffer`-1);
}