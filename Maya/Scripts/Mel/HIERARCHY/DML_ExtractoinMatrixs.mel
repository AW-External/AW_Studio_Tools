proc string Get_Clone_Shape()
{
    global string $g_DML_Current_ClonedNode;
        
    string $shape[] = `listRelatives -s -c -f $g_DML_Current_ClonedNode`;
    
    return $shape[0];
}

proc string Get_Node_Shape()
{
    global string $g_DML_Current_Node_To_Be_Cloned;
        
    string $shape[] = `listRelatives -s -c -f $g_DML_Current_Node_To_Be_Cloned`;
    
    return $shape[0];
}

global proc int IsGroup ()
{
    global string $g_DML_Current_Node_To_Be_Cloned;
    global string $g_DML_Current_ShapeNode_To_Be_Cloned;
    
        //Does This Node Have A Parent
        if(!`size $g_DML_Current_ShapeNode_To_Be_Cloned`)
            if(`objectType -isType transform $g_DML_Current_Node_To_Be_Cloned`)
                return yes;
    
    return no;
}

global proc int IsTransform()
{
    global string $g_DML_Current_Node_To_Be_Cloned;
    
    if(`objectType -isType transform $g_DML_Current_Node_To_Be_Cloned`)
        if(`getAttr ($g_DML_Current_Node_To_Be_Cloned+".visibility")`)
            return yes;
    
    return no;
}

global proc int IsTransformMesh ()
{
    global string $g_DML_Current_Node_To_Be_Cloned;
    global string $g_DML_Current_Node_To_Be_Cloned;
    
    if(`objectType -isType transform $g_DML_Current_Node_To_Be_Cloned`)
        if(`getAttr ($g_DML_Current_Node_To_Be_Cloned+".visibility")`)
            return yes;
    
    return no;
}

global proc int IsJoint ()
{
    global string $g_DML_Current_Node_To_Be_Cloned;
    global string $g_DML_Current_Node_To_Be_Cloned;
                                                        
    if(`objectType -isType joint $g_DML_Current_Node_To_Be_Cloned`)
        if(`getAttr ($g_DML_Current_Node_To_Be_Cloned+".visibility")`)
            return yes;
    
    return no;
}

global proc DirectxMatrix ()
{
    global string $g_DML_Current_ClonedNode;
	float $Resault[];
	float $m1[] = `xform -q -os -m $g_DML_Current_ClonedNode`;
	float $m2[] = {1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1};
	
	/*M[0][0]*/  $Resault[0]  = (($m1[0]  * $m2[0]) + ($m1[1]  * $m2[4]) + ($m1[2]  * $m2[8])  + ($m1[3]  * $m2[12]));
	/*M[0][1]*/  $Resault[1]  = (($m1[0]  * $m2[1]) + ($m1[1]  * $m2[5]) + ($m1[2]  * $m2[9])  + ($m1[3]  * $m2[13]));
	/*M[0][2]*/  $Resault[2]  = (($m1[0]  * ($m2[2]*-1)) + ($m1[1]  * ($m2[6]*-1)) + ($m1[2]  * ($m2[10]*-1)) + ($m1[3]  * ($m2[14]*-1)));
	/*M[0][3]*/  $Resault[3]  = (($m1[0]  * $m2[3]) + ($m1[1]  * $m2[7]) + ($m1[2]  * $m2[11]) + ($m1[3]  * $m2[15]));
	/*M[1][0]*/  $Resault[4]  = (($m1[4]  * $m2[0]) + ($m1[5]  * $m2[4]) + ($m1[6]  * $m2[8])  + ($m1[7]  * $m2[12]));
	/*M[1][1]*/  $Resault[5]  = (($m1[4]  * $m2[1]) + ($m1[5]  * $m2[5]) + ($m1[6]  * $m2[9])  + ($m1[7]  * $m2[13]));
	/*M[1][2]*/  $Resault[6]  = (($m1[4]  * ($m2[2]*-1)) + ($m1[5]  * ($m2[6]*-1)) + ($m1[6]  * ($m2[10]*-1)) + ($m1[7]  * ($m2[14]*-1)));
	/*M[1][3]*/  $Resault[7]  = (($m1[4]  * $m2[3]) + ($m1[5]  * $m2[7]) + ($m1[6]  * $m2[11]) + ($m1[7]  * $m2[15]));
	/*M[2][0]*/  $Resault[8]  = (($m1[8]  * ($m2[0]*-1)) + ($m1[9]  * ($m2[4]*-1)) + ($m1[10] * ($m2[8]*-1))  + ($m1[11] * ($m2[12]*-1)));
	/*M[2][1]*/  $Resault[9]  = (($m1[8]  * ($m2[1]*-1)) + ($m1[9]  * ($m2[5]*-1)) + ($m1[10] * ($m2[9]*-1))  + ($m1[11] * ($m2[13]*-1)));
	/*M[2][2]*/  $Resault[10] = (($m1[8]  * $m2[2]) + ($m1[9]  * $m2[6]) + ($m1[10] * $m2[10]) + ($m1[11] * $m2[14]));
	/*M[2][3]*/  $Resault[11] = (($m1[8]  * $m2[3]) + ($m1[9]  * $m2[7]) + ($m1[10] * $m2[11]) + ($m1[11] * $m2[15]));
	/*M[3][0]*/  $Resault[12] = (($m1[12] * $m2[0]) + ($m1[13] * $m2[4]) + ($m1[14] * $m2[8])  + ($m1[15] * $m2[12]));
	/*M[3][1]*/  $Resault[13] = (($m1[12] * $m2[1]) + ($m1[13] * $m2[5]) + ($m1[14] * $m2[9])  + ($m1[15] * $m2[13]));
	/*M[3][2]*/  $Resault[14] = (($m1[12] * ($m2[2]*-1)) + ($m1[13] * ($m2[6]*-1)) + ($m1[14] * ($m2[10]*-1)) + ($m1[15] * ($m2[14]*-1)));
	/*M[3][3]*/  $Resault[15] = (($m1[12] * $m2[3]) + ($m1[13] * $m2[7]) + ($m1[14] * $m2[11]) + ($m1[15] * $m2[15]));
	
	xform -m $Resault[0]  $Resault[1]  $Resault[2]  $Resault[3] 
		     $Resault[4]  $Resault[5]  $Resault[6]  $Resault[7] 
		     $Resault[8]  $Resault[9]  $Resault[10] $Resault[11] 
		     $Resault[12] $Resault[13] $Resault[14] $Resault[15]
             $g_DML_Current_ClonedNode;
}

global proc DirectX_UVs()
{
    global string $g_DML_Current_ClonedNode;
	string $number;
	string $comp,$Comps[] = ` ls -flatten ($g_DML_Current_ClonedNode+".map[*]") `;
	for($comp in $Comps)
	{
		float $xy[] = `polyEditUV -q $comp`;
		
		$number = `FloatToString(abs($xy[0]))`;
		
		int $iU =  (match(".",$number));
		
		$number = `FloatToString(abs($xy[1]))`;

		int $iV = (match(".",$number));
		
		$number = `FloatToString(abs($xy[0]))`;
		
		float $U = (match(".[0-9]+$",$number));
		
		$number = `FloatToString(abs($xy[1]))`;
		
		float $V = (match(".[0-9]+$",$number));		
		
		polyEditUV -r 0 -u ((abs(($U-$iU)))) -v (((abs($V-$iV))*-1)+1) $comp;
	}
}

global proc DirectxVertices ()
{
    global string $g_DML_Current_ClonedNode;
    
	float $Pointsz[] = `getAttr ($g_DML_Current_ClonedNode+".cp[*].zv")`;
	
	int $i;
	
	for($i = 0; $i < `size $Pointsz` ; $i++)
	{
		setAttr ($g_DML_Current_ClonedNode+".cp["+$i+"].zv") ($Pointsz[$i]*-1);
	}
}

global proc string  Make_Mesh_Clone ()
{
	global string $g_DML_Current_Node_To_Be_Cloned;
    global string $g_DML_Current_ShapeNode_To_Be_Cloned;
    global string $g_DML_Current_ClonedNode;
    global string $g_DML_Current_ClonedShape;
	
	string $AllTransforms[] = `duplicate -rr -renameChildren $g_DML_Current_Node_To_Be_Cloned`; 
	
	if(size (`listRelatives -p $AllTransforms`)) $AllTransforms = `parent -w $AllTransforms[0]`;
	
	if(size (`listRelatives -c -path -type transform $AllTransforms[0]`)) delete `listRelatives -c -allDescendents -path -type transform $AllTransforms[0]`;
	
	$g_DML_Current_ClonedNode_To_Be_Cloned = `rename $AllTransforms[0] (DML_PureName($g_DML_Current_ClonedNode))`;
	//$g_DML_Current_ClonedShape = `Get_Clone_Shape`;
	
	setAttr -l false ($g_DML_Current_ClonedNode+".translateX");
    setAttr -l false ($g_DML_Current_ClonedNode+".translateY");
    setAttr -l false ($g_DML_Current_ClonedNode+".translateZ");
	setAttr -l false ($g_DML_Current_ClonedNode+".rotateX");
    setAttr -l false ($g_DML_Current_ClonedNode+".rotateY");
    setAttr -l false ($g_DML_Current_ClonedNode+".rotateZ");
	setAttr -l false ($g_DML_Current_ClonedNode+".scaleX");
    setAttr -l false ($g_DML_Current_ClonedNode+".scaleY");
    setAttr -l false ($g_DML_Current_ClonedNode+".scaleZ");
	
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $g_DML_Current_ClonedNode;
	
	float $rotPiv[] = `xform -query -ws -rotatePivot $g_DML_Current_ClonedNode`;
	
	makeIdentity -apply false -t 1 -r 1 -s 1 -n 0 $g_DML_Current_ClonedNode;
	
	xform -relative -t   ($rotPiv[0]*-1) ($rotPiv[1]*-1) ($rotPiv[2]*-1) ($g_DML_Current_ClonedNode+".vtx[*]");
	
	xform -t ($rotPiv[0]) ($rotPiv[1]) ($rotPiv[2]) $g_DML_Current_ClonedNode;
	
	DirectxVertices;
	DirectxMatrix;
	DirectX_UVs;
	
	return $g_DML_Current_ClonedNode;
}

global proc string  Make_Group_Clone ()
{
	global string $g_DML_Current_Node_To_Be_Cloned;
    global string $g_DML_Current_ShapeNode_To_Be_Cloned;
    global string $g_DML_Current_ClonedNode;
    global string $g_DML_Current_ClonedShape;
    
    $g_DML_Current_ClonedNode = `createNode -skipSelect -name $g_DML_Current_ClonedNode transform`;
        string $loc = `createNode -skipSelect -parent $g_DML_Current_ClonedNode locator`;
				
    string $pointConstraint[] =  `pointConstraint -offset 0 0 0 -weight 1 $g_DML_Current_Node_To_Be_Cloned $g_DML_Current_ClonedNode`;
    string $orientConstraint[] = `orientConstraint -offset 0 0 0 -weight 1 $g_DML_Current_Node_To_Be_Cloned $g_DML_Current_ClonedNode`;
    delete $pointConstraint;
    delete $orientConstraint;
	
	DirectxMatrix;
	
	return $g_DML_Current_ClonedNode;
}

global proc string  Make_Joint_Clone ()
{    
    global string $g_DML_Current_Node_To_Be_Cloned;
    global string $g_DML_Current_ShapeNode_To_Be_Cloned;
    global string $g_DML_Current_ClonedNode;
    global string $g_DML_Current_ClonedShape;
    
    $g_DML_Current_ClonedNode = `createNode -skipSelect -name $g_DML_Current_ClonedNode transform`;
    
    string $loc = `createNode -skipSelect -parent $g_DML_Current_ClonedNode locator`;
    
    string $pointConstraint[] =  `pointConstraint -offset 0 0 0 -weight 1 $g_DML_Current_Node_To_Be_Cloned $g_DML_Current_ClonedNode`;
    //string $orientConstraint[] = `orientConstraint -mo -weight 1 $g_DML_Current_Node_To_Be_Cloned $g_DML_Current_ClonedNode`;
    delete $pointConstraint;
    //delete $orientConstraint;
	
	return $g_DML_Current_ClonedNode;

}

global proc Path ()
{
    global string $g_DML_Current_Extraction_Set;
    global string $g_DML_Current_Node_To_Be_Cloned;
    global string $g_DML_Current_ShapeNode_To_Be_Cloned;
    global string $g_DML_Current_ClonedNode;
    global string $g_DML_Current_ClonedShape;
    global string $g_DML_CollectedJoints;
	
	string $PureName = `DML_PureName $g_DML_Current_Node_To_Be_Cloned`;
		
	if((`IsTransform`)||(`IsGroup`)||(`IsJoint`))
	{
		$g_DML_Current_ClonedNode = ("Cloned_"+$PureName);
		
		if(!(`objExists $g_DML_Current_ClonedNode`))
		{
			if(`IsTransformMesh`)
			{	
				$g_DML_Current_ClonedNode = `Make_Mesh_Clone`;
				
				string $parented[] = `parent $g_DML_Current_ClonedNode ($g_DML_Current_Extraction_Set)`;
                
                $g_DML_Current_ClonedNode = longNameOf($parented[0]);
                
                addAttr -dt "string" -keyable 1 -readable 1 -writable 1 -shortName "clt" -longName  "cloneType" $g_DML_Current_ClonedNode;
                addAttr -dt "string" -keyable 1 -readable 1 -writable 1 -shortName "clr" -longName  "CloneReference" $g_DML_Current_ClonedNode;
                setAttr -type "string" ($g_DML_Current_ClonedNode+".cloneType") "Mesh";
                setAttr -type "string" ($g_DML_Current_ClonedNode+".CloneReference") $g_DML_Current_Node_To_Be_Cloned;
			}
			else if(`IsGroup`)
			{
				Make_Group_Clone;
                
                string $parented[] = `parent $g_DML_Current_ClonedNode ($g_DML_Current_Extraction_Set)`;
                
                $g_DML_Current_ClonedNode = longNameOf($parented[0]);
                
                addAttr -dt "string" -keyable 1 -readable 1 -writable 1 -shortName "clt" -longName  "cloneType" $g_DML_Current_ClonedNode;
                addAttr -dt "string" -keyable 1 -readable 1 -writable 1 -shortName "clr" -longName  "CloneReference" $g_DML_Current_ClonedNode;
                setAttr -type "string" ($g_DML_Current_ClonedNode+".cloneType") "Group";
                setAttr -type "string" ($g_DML_Current_ClonedNode+".CloneReference") $g_DML_Current_Node_To_Be_Cloned;
			}
            else if(`IsJoint`)
			{
				Make_Joint_Clone;
                
                string $parented[] = `parent $g_DML_Current_ClonedNode ($g_DML_Current_Extraction_Set)`;
                
                $g_DML_Current_ClonedNode = longNameOf($parented[0]);
                
                addAttr -dt "string" -keyable 1 -readable 1 -writable 1 -shortName "clt" -longName  "cloneType" $g_DML_Current_ClonedNode;
                addAttr -dt "string" -keyable 1 -readable 1 -writable 1 -shortName "clr" -longName  "CloneReference" $g_DML_Current_ClonedNode;
                setAttr -type "string" ($g_DML_Current_ClonedNode+".cloneType") "Joint";
                setAttr -type "string" ($g_DML_Current_ClonedNode+".CloneReference") $g_DML_Current_Node_To_Be_Cloned;
			}
		}
	}
	
	string $Assemblie[] = `listRelatives -fullPath -c $g_DML_Current_Node_To_Be_Cloned`;
	
	for ($g_DML_Current_Node_To_Be_Cloned in $Assemblie)
	{
        $g_DML_Current_ShapeNode_To_Be_Cloned = `Get_Node_Shape`;
        
		Path;
	}
}

global proc Hiarky()
{
	global string $g_DML_Current_Export_Group; 
    global string $g_DML_Current_Node_To_Be_Cloned;
    global string $g_DML_Current_ShapeNode_To_Be_Cloned;
    
	string $Groups[] = `listRelatives -type transform $g_DML_Current_Export_Group`;
	
	for($g_DML_Current_Node_To_Be_Cloned in `ls -long $Groups`)
	{
        $g_DML_Current_ShapeNode_To_Be_Cloned = `Get_Node_Shape`;
        
		Path;
	}
}

global proc Reasembale_Cloned_Hiarky()
{
	global string $g_DML_Current_Extraction_Set;
    global string $g_DML_Current_Export_Group;
    
	string $PureGroupchildern[],$Groupchildern[] = (`listRelatives -allDescendents -fullPath -type transform -type joint $g_DML_Current_Export_Group`);
    
    string $PureSetchildern[],$Setchildern[] =  (`listRelatives -allDescendents  -fullPath -type transform -type joint $g_DML_Current_Extraction_Set`);
    
    int $Reorder[],$i,$childernCount = `size $Groupchildern`;
    
    for($i in `DML_Range 0 $childernCount 1`)
    {
        $PureGroupchildern[$i] = `DML_PureName $Groupchildern[$i]`;
        
        $PureSetchildern[$i] = `DML_PureName $Setchildern[$i]`;
    }
    
    for($i in `DML_Range 0 $childernCount 1`)
    {
        $Reorder[$i] = `FindItemIndex $PureGroupchildern[$i] $PureSetchildern`;
    }

    $Setchildern = (`NewArrayFromIdexingOrder $Setchildern $Reorder`);
    
	for($i in `DML_Range 0 $childernCount 1`)
	{
        if(size(`firstParentOf $Groupchildern[$i]`))
        {
            int $index = `FindItemIndex (firstParentOf($Groupchildern[$i])) $Groupchildern`;
            
            if($index!=-1)
            {
                if((`objExists $Setchildern[$i]`)&&(`objExists $Setchildern[$index]`))
                {
                    parent $Setchildern[$i] $Setchildern[$index];
                }
            }
        }
	}

    $Setchildern =  (`listRelatives -allDescendents  -fullPath -type transform -type joint $g_DML_Current_Extraction_Set`);
    string $child;

    for($child in $Setchildern)
	{
        string $Type = `getAttr ($child+".cloneType")`;
        
        if($Type=="Joint")
        {
            string $Refence = `getAttr ($child+".CloneReference")`;
            
            pointConstraint -mo -weight 1 $Refence $child;
            orientConstraint -mo -weight 1 $Refence $child;
        }
	}
}

global proc DML_ExtractoinMatrixs()
{
    global string $g_DML_Current_Extraction_Set;
    global string $g_DML_Current_Export_Group;
    global string $g_DML_CollectedJoints = "";
    string $SetNames[];
    
	string $Output_groups[] = `ls "Export_Group_*"`;
	
	for($g_DML_Current_Export_Group in $Output_groups)
	{
		string $setName =  (substring($g_DML_Current_Export_Group,14,`size $g_DML_Current_Export_Group`));
		
		$SetNames[`size $SetNames`] = $setName;
        
        $g_DML_Current_Extraction_Set = ("Export_Set_"+$setName);
        
		if(!(`objExists $g_DML_Current_Extraction_Set`))
		{
			group -em -n $g_DML_Current_Extraction_Set;
		}

		Hiarky;
		
		string $child,$childern[] = `ls -type transform "Cloned_*"`;
		
		for($child in $childern)
            if(`objExists $child`)
			    rename $child (`match "[^Cloned_].+" $child`);
            
        Reasembale_Cloned_Hiarky;
	}
}
DML_ExtractoinMatrixs;
